# Epoch PIC Code Input Deck Template
#
# Designed to work for epoch1d, 2d and 3d (irrelevant parameters should be ignored in recent versions of Epoch) without any changes.
# Template for a flat glass target with adjustable rotation about the z-axis.
# Target additionally has the option of an exponential density ramp.
# The target is positioned such that the point in the ramp of critical density is placed at (0,0,0)
# Note, this template must be manually combined with the laser template to simulate a laser-plasma interaction
# The wavelength parameter used here is purely for the critical density calculation.
#
# tested with epoch v4.3.7
# created by Mark Yeung and Stephan Kuschel

begin:constant

  # --- GRID PARAMETERS ---
  xlength = 10 * micron
  ylength = 10 * micron
  zlength = 10 * micron
  cells_per_x = 25 / micron
  cells_per_y = 25 / micron
  cells_per_z = 25 / micron
  grid_x_min = - 5 * micron
  grid_y_min = - 5 * micron
  grid_z_min = - 5 * micron

  # --- DRIVING LASER PULSE ---
  # wavelength
  las_lambda = 0.8 * micron
  
  # --- TARGET ---
  # dont touch, but necessary for following calculations
  n_crit = critical(2 * pi * c / las_lambda)

  # density (Fused Silica at full ionisation: 6.6e29)
  n_max = 360 * n_crit

  # rough estimation for number of electrons per cell (if frac=1)
  npart_per_cell = 1

  # scale length - make sure to be able to resolve it.
  n_Lp = 10 * las_lambda / 10

  #Thickness of constant density in Target. Thickness is parallel to exponential ramp and in addition.
  n_thickness = 1.5 * micron 

  # Rotation angle of the target. Rotation axis is around (0,0). There is always the critical density.
  n_angle = -45 * pi / 180

  #width of Target perpendicular to exponential ramp.
  n_width = 10 * micron 
 
  #Target shift parallel to Target surface
  n_width_shift = -0.5 * micron
  
  # --- DERIVED CONSTANTS --- DO NOT TOUCH ---
  # only change things here if you know what you are doing!

  # --- TARGET --- position calculation
  x_c = n_Lp * loge(n_max / (n_crit)) # Distance between n=n_crit und n=n_max 
  xrot = x * cos(n_angle) + y * sin(n_angle) #rotated coordinates
  yrot = -x * sin(n_angle) + y * cos(n_angle)

  # total particle number calculation
  npart1D = npart_per_cell * (n_thickness + 3 * n_Lp) * cells_per_x
  npart2D = npart_per_cell * (n_thickness + 3 * n_Lp) * n_width * cells_per_x * cells_per_y
  npart3D = npart_per_cell * (n_thickness + 3 * n_Lp) * zlength * n_width * cells_per_x * cells_per_y * cells_per_z

end:constant

begin:control

  t_end = 1 * femto 
  
  npart = if(ndims eq 1, npart1D, if(ndims eq 2, npart2D, if(ndims eq 3, npart3D, 1)))

  particle_tstart = 0 * femto

  nx = xlength * cells_per_x
  ny = ylength * cells_per_y
  nz = zlength * cells_per_z
  x_min = grid_x_min
  x_max = x_min + xlength
  y_min = grid_y_min
  y_max = y_min + ylength
  z_min = grid_z_min
  z_max = z_min + zlength

  stdout_frequency = 20
  print_constants = T
end:control

begin:boundaries
  bc_x_min = simple_outflow
  bc_x_max = simple_outflow
  bc_y_min = simple_outflow
  bc_y_max = simple_outflow
  bc_z_min = simple_outflow
  bc_z_max = simple_outflow
end:boundaries

begin:species
  # Electron
  name = electron
  charge = -1.0
  mass = 1.0
  frac = 1
  
  #Model the target shape in rotated coordinates
  density = if ( (xrot lt (x_c + n_thickness)) and (xrot gt x_c) and (abs(yrot - n_width_shift) lt (n_width/2)), n_max, 0.0)
  density = if ( (xrot lt x_c) and (abs(yrot - n_width_shift) lt (n_width/2)), n_max * exp( (xrot - x_c) / n_Lp ), density(electron) )

  density_min = 0.05 * n_crit
  density_max = n_max
end:species

#Fused Silica SiO2 at full ionisation

begin:species
  name = O8
  charge = 8
  mass = 16 * 1836.2
  frac = 1/5

  density = density(electron) / 30 * 2
  density_min = 0.05 * n_crit / 30 * 2
  density_max = n_max / 30 * 2
end:species

begin:species
  name = Si14
  charge = 14
  mass = 28 * 1836.2
  frac = 1/5

  density = density(electron) / 30
  density_min = 0.05 * n_crit / 30 
  density_max = n_max / 30
end:species

begin:output_global
   force_final_to_be_restartable = F
end:output_global

begin:output
  disabled = F
  name = particles

  # dump_at_times = 10 * femto, 20 * femto, 30 * femto
  # dt_snapshot = 20 * femto
  # time_start = 10 * femto
  # time_stop = 50 * femto
  dump_first = F
  dump_final = F
 
  # Properties at particle positions
  particles = always + single
  px = always + single
  py = always + single 
  pz = always + single
  vx = never
  vy = never
  vz = never
  charge = never
  mass = never
  particle_weight = always + single
  ejected_particles = never
  particle_energy = never
  relativistic_mass = never
  gamma = never
  id = never

  # Properties on grid
  grid = always + single
  ex = never
  ey = never
  ez = never
  bx = never
  by = never
  bz = never
  jx = never
  jy = never
  jz = never

  # Derived variables
  ekbar = never
  ekflux = never
  mass_density = never
  charge_density = never
  number_density = never
  temperature = never
  poynt_flux = never
end:output
